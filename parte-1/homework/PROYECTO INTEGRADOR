-- VENTAS:

-- Ventas Brutas, netas y margen
with ols_usd as (
	select *, 
		case
			when ols.moneda = 'ARS' then ols.venta/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then ols.venta/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then ols.venta/fx.cotizacion_usd_eur
		end as ventas_usd,
		case 
			when ols.moneda = 'ARS' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_eur
		end as descuentos_usd,
		case 
			when ols.moneda = 'ARS' then ols.impuestos/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then ols.impuestos/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then ols.impuestos/fx.cotizacion_usd_eur
		end as impuestos_usd,
		case
			when ols.moneda = 'ARS' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_eur
		end as creditos_usd
	from 
		stg.order_line_sale ols
	left join 
		stg.monthly_average_fx_rate fx 
		on 
			fx.mes = date(date_trunc('month', ols.fecha))
)
select 
	sum(ou.ventas_usd) as ventas_brutas, 
	sum(ou.ventas_usd+ou.descuentos_usd) as ventas_netas,
	sum(ou.ventas_usd+ou.descuentos_usd-co.costo_promedio_usd) as margen
from 
	ols_usd as ou
left join 
	stg.cost co 
	on 
		ou.producto = co.codigo_producto
;

-- Margen por categoria de producto
with ols_usd as (
	select *, 
		case
			when ols.moneda = 'ARS' then ols.venta/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then ols.venta/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then ols.venta/fx.cotizacion_usd_eur
		end as ventas_usd,
		case 
			when ols.moneda = 'ARS' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_eur
		end as descuentos_usd,
		case 
			when ols.moneda = 'ARS' then ols.impuestos/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then ols.impuestos/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then ols.impuestos/fx.cotizacion_usd_eur
		end as impuestos_usd,
		case
			when ols.moneda = 'ARS' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_eur
		end as creditos_usd
	from 
		stg.order_line_sale ols
	left join 
		stg.monthly_average_fx_rate fx 
		on 
			fx.mes = date(date_trunc('month', ols.fecha))
)
select 
	pm.categoria, 
	sum(ou.ventas_usd + ou.descuentos_usd - co.costo_promedio_usd) as margen
from 
	ols_usd as ou
left join 
	stg.cost co 
	on 
		ou.producto = co.codigo_producto
left join 
	stg.product_master pm 
	on 
		ou.producto = pm.codigo_producto 
group by 
	pm.categoria 
;

-- ROI por categoria de produto. ROI = Ventas netas / Valor promedio de inventario (TENGO MUCHAS DUDAS SOBRE SI ESTE ESTA BIEN AS√ç)
with ols_usd as (
	select 
		ols.producto,
		extract(year from ols.fecha) || '-' || extract(month from ols.fecha) as ym, 
		sum(round(case
			when ols.moneda = 'ARS' then ols.venta/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then ols.venta/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then ols.venta/fx.cotizacion_usd_eur
		end, 3)+round(case 
			when ols.moneda = 'ARS' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_eur
		end, 3)) as venta_neta
	from 
		stg.order_line_sale ols
	left join 
		stg.monthly_average_fx_rate fx 
		on 
			fx.mes = date(date_trunc('month', ols.fecha))
	group by 1, 2
	order by 1
), promedios_de_inventario as (
	select 
		i.sku, 
		extract(year from i.fecha) || '-' || extract(month from i.fecha) as ym, 
		round(avg(((i.inicial+i.final)/2)*c.costo_promedio_usd), 3) as costo_usd
	from 
		stg.inventory i
	left join 
		stg.cost c 
		on 
		i.sku = c.codigo_producto
	group by 
		1, 2
)
select 
	coalesce(ou.ym, pdi.ym) as year_month,
	pm.subcategoria,
	coalesce(sum(ou.venta_neta),0) as venta_neta,
	sum(pdi.costo_usd) as costo_usd,
	coalesce(sum(ou.venta_neta), 0)/sum(pdi.costo_usd) as ROI
from 
	promedios_de_inventario pdi 
full outer join 
	ols_usd ou
	on 
		ou.producto = pdi.sku 
	and 
	 	ou.ym = pdi.ym
left join 
	 stg.product_master pm
	 on
	 	coalesce(ou.producto, pdi.sku) = pm.codigo_producto
where 
	 coalesce(ou.ym, pdi.ym) = '2022-11'
group by
	 1, 2
;

-- AOV (Average order value), valor promedio por orden.
with ols_usd as (
	select *, 
		round(case
			when ols.moneda = 'ARS' then ols.venta/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then ols.venta/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then ols.venta/fx.cotizacion_usd_eur
		end, 3) as ventas_usd,
		round(case 
			when ols.moneda = 'ARS' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_eur
		end, 3) as descuentos_usd
	from 
		stg.order_line_sale ols
	left join 
		stg.monthly_average_fx_rate fx 
		on 
			fx.mes = date(date_trunc('month', ols.fecha))
), pre_aov as(
	select 
		ou.orden, 
		sum(ou.ventas_usd + ou.descuentos_usd)/count(*) as valor_orden_promedio
	from 
		ols_usd ou
	left join 
		stg.cost co 
		on 
			ou.producto = co.codigo_producto
	group by 
		ou.orden
)
select
	round(sum(valor_orden_promedio)/count(orden),6) as AOV
from
	pre_aov
;

-- CONTABILIDAD:

-- Impuestos pagados
with ols_usd as (
	select *, 
		case
			when ols.moneda = 'ARS' then ols.venta/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then ols.venta/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then ols.venta/fx.cotizacion_usd_eur
		end as ventas_usd,
		case 
			when ols.moneda = 'ARS' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_eur
		end as descuentos_usd,
		case 
			when ols.moneda = 'ARS' then ols.impuestos/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then ols.impuestos/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then ols.impuestos/fx.cotizacion_usd_eur
		end as impuestos_usd,
		case
			when ols.moneda = 'ARS' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_eur
		end as creditos_usd
	from 
		stg.order_line_sale ols
	left join 
		stg.monthly_average_fx_rate fx 
		on 
			fx.mes = date(date_trunc('month', ols.fecha))
)
select 
	sum(ou.impuestos_usd) as impuesto_total_pagado
from 
	ols_usd as ou
left join 
	stg.cost co 
	on 
		ou.producto = co.codigo_producto
;

-- Tasa de impuesto. Impuestos / Ventas netas
with ols_usd as (
	select *, 
		case
			when ols.moneda = 'ARS' then ols.venta/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then ols.venta/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then ols.venta/fx.cotizacion_usd_eur
		end as ventas_usd,
		case 
			when ols.moneda = 'ARS' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_eur
		end as descuentos_usd,
		case 
			when ols.moneda = 'ARS' then ols.impuestos/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then ols.impuestos/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then ols.impuestos/fx.cotizacion_usd_eur
		end as impuestos_usd,
		case
			when ols.moneda = 'ARS' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_eur
		end as creditos_usd
	from 
		stg.order_line_sale ols
	left join 
		stg.monthly_average_fx_rate fx 
		on 
			fx.mes = date(date_trunc('month', ols.fecha))
)
select 
	sum(ou.impuestos_usd) as impuesto_total_pagado, 
	sum(ou.ventas_usd + ou.descuentos_usd) as ventas_netas,
	sum(ou.impuestos_usd)/sum(ou.ventas_usd + ou.impuestos_usd) as tasa_de_impuesto
from 
	ols_usd as ou
left join 
	stg.cost co 
	on 
		ou.producto = co.codigo_producto
;

-- Cantidad de creditos otorgados
with ols_usd as (
	select *, 
		case
			when ols.moneda = 'ARS' then ols.venta/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then ols.venta/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then ols.venta/fx.cotizacion_usd_eur
		end as ventas_usd,
		case 
			when ols.moneda = 'ARS' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_eur
		end as descuentos_usd,
		case 
			when ols.moneda = 'ARS' then ols.impuestos/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then ols.impuestos/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then ols.impuestos/fx.cotizacion_usd_eur
		end as impuestos_usd,
		case
			when ols.moneda = 'ARS' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_eur
		end as creditos_usd
	from 
		stg.order_line_sale ols
	left join 
		stg.monthly_average_fx_rate fx 
		on 
			fx.mes = date(date_trunc('month', ols.fecha))
)
select 
	count(ou.creditos_usd) as numero_de_creditos_otorgados, 
	sum(ou.creditos_usd)*-1 as cantidad_en_creditos_otorgados
from 
	ols_usd as ou
left join 
	stg.cost co 
	on 
		ou.producto = co.codigo_producto
where 
	ou.creditos_usd < 0
;

-- Valor pagado final por order de linea. Valor pagado: Venta - descuento + impuesto - credito
with ols_usd as (
	select *, 
		case
			when ols.moneda = 'ARS' then ols.venta/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then ols.venta/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then ols.venta/fx.cotizacion_usd_eur
		end as ventas_usd,
		case 
			when ols.moneda = 'ARS' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_eur
		end as descuentos_usd,
		case 
			when ols.moneda = 'ARS' then ols.impuestos/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then ols.impuestos/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then ols.impuestos/fx.cotizacion_usd_eur
		end as impuestos_usd,
		case
			when ols.moneda = 'ARS' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_eur
		end as creditos_usd
	from 
		stg.order_line_sale ols
	left join 
		stg.monthly_average_fx_rate fx 
		on 
			fx.mes = date(date_trunc('month', ols.fecha))
)
select 
	ou.orden, 
	ou.producto, 
	sum(ou.ventas_usd+ou.descuentos_usd+ou.impuestos_usd+ou.creditos_usd) as valor_final
from 
	ols_usd as ou
left join 
	stg.cost co 
	on 
		ou.producto = co.codigo_producto
group by 
	ou.orden, ou.producto
order by 
	ou.orden
;

--- Nota: La siguiente Query reune los tres primeros puntos en una sola consulta y
-- muestra: Impuesto total pagado, tasa de impuesto, cantidad de cr√©ditos (n√∫mero 
-- de otorgados y cantidad total en usd).
with ols_usd as (
	select *, 
		case
			when ols.moneda = 'ARS' then ols.venta/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then ols.venta/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then ols.venta/fx.cotizacion_usd_eur
		end as ventas_usd,
		case 
			when ols.moneda = 'ARS' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then coalesce(ols.descuento, 0)/fx.cotizacion_usd_eur
		end as descuentos_usd,
		case 
			when ols.moneda = 'ARS' then ols.impuestos/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then ols.impuestos/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then ols.impuestos/fx.cotizacion_usd_eur
		end as impuestos_usd,
		case
			when ols.moneda = 'ARS' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_peso
			when ols.moneda = 'URU' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_uru
			when ols.moneda = 'EUR' then coalesce(ols.creditos, 0)/fx.cotizacion_usd_eur
		end as creditos_usd
	from 
		stg.order_line_sale ols
	left join 
		stg.monthly_average_fx_rate fx 
		on 
			fx.mes = date(date_trunc('month', ols.fecha))
)
select 
	sum(ou.impuestos_usd) as impuesto_total_pagado, 
	sum(ou.impuestos_usd)/sum(ou.ventas_usd + ou.impuestos_usd) as tasa_de_impuesto,
	count(ou.creditos_usd) as numero_de_creditos_otorgados, 
	sum(ou.creditos_usd)*-1 as cantidad_en_creditos_otorgados
from 
	ols_usd as ou
left join 
	stg.cost co 
	on 
		ou.producto = co.codigo_producto
where 
	ou.creditos_usd < 0
;

-- SUPLY CHAIN:

-- Costo de inventario promedio por tienda
select 
	i.tienda, 
	extract(year from i.fecha) || '-' || extract(month from i.fecha) as ym,
	round(avg(((i.inicial+i.final)/2)*(c.costo_promedio_usd)),3) as costo_usd
from 
	stg.inventory i
left join 
	stg.cost c 
	on
		i.sku = c.codigo_producto
group by 
	1, 2
order by 1
;


-- Costo del stock de productos que no se vendieron por tienda (a pesar que me dijiste que estaba bien con el full outer, lo quise cambiar a left join con tu consejo)
with productos_no_vendidos as(
	select
		i.tienda,
		i.sku,
		ols.cantidad,
		round(avg((i.inicial+i.final)/2), 2) as inventario
	from
		stg.inventory i
	left join
		stg.order_line_sale ols
		on
			i.tienda = ols.tienda
		and
			i.sku = ols.producto
		and
			i.fecha = ols.fecha
	where 
		ols.cantidad is null
	group by 1, 2, 3
)
select 
	pnv.tienda, 
	sum(c.costo_promedio_usd*pnv.inventario) as costo_no_vendidos 
from 
	productos_no_vendidos pnv
left join 
	stg.cost c 
	on 
		pnv.sku = c.codigo_producto
group by 
	pnv.tienda
;

-- Cantidad y costo de devoluciones
with returned_usd as (
	select 
		rm.*, 
		c.costo_promedio_usd
	from 
		stg.return_movements rm
	left join 
		stg.cost c 
		on 
			rm.item = c.codigo_producto
)	
select 
	count(distinct orden_venta) as cantidad_devoluciones, 
	sum(costo_promedio_usd) as costo_devoluciones_usd
from 
	returned_usd
where 
	desde = 'Cliente'
;

-- TIENDAS:

-- Ratio de conversion. Cantidad de ordenes generadas / Cantidad de gente que entra
with ordenes_x_tienda as (
	select 
		tienda, 
		count(distinct orden) as cantidad_de_ordenes
	from 
		stg.order_line_sale
	group by 
		tienda
), transito_tienda as (
	select 
		tienda, 
		round(coalesce(avg(conteo),0),1) as promedio_personas
	from 
		stg.super_store_count
	group by 
		tienda
)
select 
	oxt.tienda, 
	coalesce(tt.tienda, 0) as tienda_con_transito, 
	coalesce((oxt.cantidad_de_ordenes/tt.promedio_personas),0) as ratio_conversion
from 
	ordenes_x_tienda as oxt
left join 
	transito_tienda as tt 
	on 
		oxt.tienda = tt.tienda
;

-- Crear y subir a nuestra DB la tabla "return_movements" para poder utilizarla en la segunda parte.

CREATE TABLE stg.return_movements
	(
		  orden_venta VARCHAR(10)
		, envio VARCHAR(10)
		, item VARCHAR(10)
		, cantidad INT
		, id_movimiento INT
		, desde VARCHAR(100)
		, hasta VARCHAR(100)
		, recibido_por VARCHAR(255)
		, fecha DATE
	);
	
-- PREGUNTAS DE ENTREVISTAS:

-- Como encuentro duplicados en una tabla. Dar un ejemplo mostrando duplicados de la columna orden en la tabla de ventas.

-- RESPUESTA:
-- Primero utilizamos la clausula SELECT para 
-- determinar la columna que deseamos consultar para 
-- verificar si se encuentran duplicados, seguido de 
-- la cl√°usula COUNT(*) la cual se encargar√° se sumar 
-- todos los valores contenidos en la columna. 
-- Posteriormente, indicaremos la tabla desde la cual 
-- realizaremos la consulta y agruparemos ese resultado 
-- por la columna o dato seleccionado, aplicando la 
-- cl√°usula HAVING junto con la cl√°usula COUNT(*) ya
-- utilizada para que devulva aquellos valores que 
-- cumplan la condici√≥n se√±alada, en este caso, ser
-- mayores que uno (>1).

select orden, count(*)
from stg.order_line_sale
group by orden
having count(orden)>1

-- Como elimino duplicados?

-- RESPUESTA:
-- Para eliminar valores duplicados de una consulta
-- podemos utilizar la cl√°usula DISTINC o, si deseamos
-- realizar operaciones en la consulta, utilizaremos
-- la cl√°usula GROUP BY.

select distinct(orden)
from stg.order_line_sale -- Forma 1

select orden, sum(venta)
from stg.order_line_sale
group by orden -- Forma 2

-- Cual es la diferencia entre UNION y UNION ALL

-- RESPUESTA:
-- UNION une dos tablas dejando los registros 
-- que son distintos, elimnando los repetidos. 
-- UNION ALL une dos tablas dejando todos los 
-- registros.

-- Como encuentro registros en una tabla que no estan en otra tabla

-- RESPUESTA:
-- Utilizando la cl√°usula FULL OUTER JOIN que combina ambas
-- tablas devolviendo tanto filas coincidentes de ambas tablas 
-- como filas no coincidentes con valores null.

create table bkp.tabla1
	(
			id INT
	);
create table bkp.tabla2
	(
			id INT
	);
insert into bkp.tabla1 values (1), (2), (3), (4);
insert into bkp.tabla2 values (5), (6), (7), (8);

select * 
from bkp.tabla1 t1
full outer join bkp.tabla2 t2 on t1.id = t2.id

-- CUal es la diferencia entre INNER JOIN y LEFT JOIN

-- RESPUESTA:
-- INNER JOIN devulve s√≥lo las filas coincidentes 
-- en ambas tablas mientras que LEFT JOIN devuelve
-- todas las filas de la tabla izquierda y las filas 
-- coincidentes de la tabla derecha.

select * 
from bkp.tabla1 t1
inner join bkp.tabla2 t2 on t1.id = t2.id -- no devolver√° resultados ya que ninguna fila coincide entre ambas tablas

select * 
from bkp.tabla2 t2
left join bkp.tabla1 t1 on t1.id = t2.id -- devolvera s√≥lo las filas de la tabla izquierda ya que ninguna fila de la derecha coincide con la primera
