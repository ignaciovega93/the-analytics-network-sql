-- Ejercicio 1
/*Ejecutar el siguiente script para crear las tablas emp_2022 y emp_2023 dentro del esquema test.*/

create table test.emp_2022( 	
	emp_id int,
	designation varchar(20)
);

create table test.emp_2023
( 	emp_id int,
	designation varchar(20));

insert into 
	test.emp_2022 
values 
	(1,'Trainee'), 
	(2,'Developer'),
	(3,'Senior Developer'),
	(4,'Manager')
;

insert into 
	test.emp_2023 
values 
	(1,'Developer'), 
	(2,'Developer'),
	(3,'Manager'),
	(5,'Trainee')
;

select * from test.emp_2022
select * from test.emp_2023

/*Armar una tabla con el id del empleado y una columna que represente si el empleado 
"Ascendio" , "Renuncio", o se "Incorporo". En caso de no haber cambios, no mostrarlo. 
Un empleado renuncia cuando esta el primer aÃ±o y no el segundo, y viceversa para 
cuando un empleado se incorpora*/

with ef as (
	select
		emp_id,
		case
			when lower(designation) = 'trainee' then 1
			when lower(designation) = 'developer' then 2
			when lower(designation) = 'senior developer' then 3
			when lower(designation) = 'manager' then 4
			else 0
		end as designation
	from
		test.emp_2022
), es as (
	select
		emp_id,
		case
			when lower(designation) = 'trainee' then 1
			when lower(designation) = 'developer' then 2
			when lower(designation) = 'senior developer' then 3
			when lower(designation) = 'manager' then 4
			else 0
		end as designation
	from
		test.emp_2023
)
select
	coalesce(ef.emp_id, es.emp_id) as emp_id,
	case 
		when es.designation > ef.designation then 'Ascendio'
		when es.designation = ef.designation then 'Mantuvo posicion'
		when ef.designation is null then 'Incorporo'
		when es.designation is null then 'Renuncio'
	end as situation
from
	ef
full outer join
	es
	on
		ef.emp_id = es.emp_id
where
	(case 
		when es.designation > ef.designation then 'Ascendio'
		when es.designation = ef.designation then 'Mantuvo posicion'
		when ef.designation is null then 'Incorporo'
		when es.designation is null then 'Renuncio'
	end) != 'Mantuvo posicion'
;

-- Ejercicio 2
/*Ejecutar el siguiente script para crear la tabla orders dentro del esquema test.*/

create table test.orders (
	order_id integer,
	customer_id integer,
	order_date date,
	order_amount integer
);

insert into 
	test.orders 
values
	 (1,100,cast('2022-01-01' as date),2000)
	,(2,200,cast('2022-01-01' as date),2500)
	,(3,300,cast('2022-01-01' as date),2100)
	,(4,100,cast('2022-01-02' as date),2000)
	,(5,400,cast('2022-01-02' as date),2200)
	,(6,500,cast('2022-01-02' as date),2700)
	,(7,100,cast('2022-01-03' as date),3000)
	,(8,400,cast('2022-01-03' as date),1000)
	,(9,600,cast('2022-01-03' as date),3000)
;

select * from test.orders

/*Encontrar para cada dia, cuantas ordenes fueron hechas por clientes nuevos +
("first_purchase") y cuantas fueron hechas por clientes que ya habian comprado 
("repeat_customer"). Este es un concepto que se utiliza mucho en cualquier empresa 
para entender la capacidad de generar clientes nuevos o de retener los existentes*/

with orders_per_day as (
	select 
		o1.order_id,
		o1.customer_id,
		o1.order_date,
		o1.order_amount,
		case
			when o2.customer_id = o1.customer_id then false
			else true
		end as is_first_customer,
		case
			when o2.customer_id = o1.customer_id then true
			else false
		end as is_repeat_customer,
		o2.order_date as last_shop_date,
		o2.order_amount as last_order_amount
	from
		test.orders o1
	left join
		test.orders o2
		on
			o1.order_date - 1 = o2.order_date
		and o1.customer_id = o2.customer_id	
)
select 
	order_date,
	count(case
		when is_first_customer = true then 1
		end) as number_of_first_customers,
	count(case
		when is_repeat_customer = true then 1
		end) as numer_of_repeated_customers
from 
	orders_per_day
group by 1	
order by 1
;

-- Ejercicio 3
/* Ejecutar el siguiente script para crear las tablas orders2 y products dentro del esquema test.*/

create table test.orders2(
	order_id int,
	customer_id int,
	product_id int
);

insert into 
	test.orders2 
values 
	(1, 1, 1),
	(1, 1, 2),
	(1, 1, 3),
	(2, 2, 1),
	(2, 2, 2),
	(2, 2, 4),
	(3, 1, 5)
;

create table test.products (
	id int,
	name varchar(10)
);
	
insert into 
	test.products 
values 
	(1, 'A'),
	(2, 'B'),
	(3, 'C'),
	(4, 'D'),
	(5, 'E')
;

select * from test.orders2
select * from test.products

/*Armar una tabla que sirva como una version simplificada de un sistema de recomendacion
y muestre, cuantas ordenes se llevan por cada PAR de productos*/

with combinations as (
	select
		p1.name as producto_1,
		p2.name as producto_2
	from
		test.products p1
	left join
		test.products p2
		on p1.id < p2.id
), orders as(
	select
		o1.order_id,
		p1.name as producto_1,
		p2.name as producto_2
	from
		test.orders2 o1
	left join
		test.orders2 o2
	on
		o1.order_id = o2.order_id
	and
		o1.product_id < o2.product_id
	left join
		test.products p1
	on o1.product_id = p1.id
	left join
		test.products p2
	on o2.product_id = p2.id
	order by 1, 2
)
select
	count(ord.order_id) as qty_of_orders,
	com.producto_1 || com.producto_2 as combination
from
	orders ord
left join
	combinations com
	on
		ord.producto_1 = com.producto_1
	and
		ord.producto_2 = com.producto_2
where 
	com.producto_1 is not null
group by 2
order by 1 desc
;
